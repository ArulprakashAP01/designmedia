name: Dependency Version Checker

on:
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:

jobs:
  check-dependencies:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests packaging
          
      - name: Run dependency checker
        id: dependency-check
        run: python .github/scripts/check_dependencies.py
        
      - name: Format and Post Results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const checkResults = fs.readFileSync('dependency-report.json', 'utf8');
            const results = JSON.parse(checkResults);
            
            let comment = '# üì¶ Dependency Version Check Report\n\n';
            
            for (const [manager, packages] of Object.entries(results)) {
              if (packages.length > 0) {
                comment += `### ${manager.toUpperCase()} Dependencies\n`;
                comment += '| Package | Current Version | Latest Version | Status |\n';
                comment += '|---------|----------------|----------------|--------|\n';
                
                for (const pkg of packages) {
                  const status = pkg.current !== pkg.latest ? '‚ö†Ô∏è Update Available' : '‚úÖ Up to date';
                  comment += `| ${pkg.name} | ${pkg.current} | ${pkg.latest} | ${status} |\n`;
                }
                
                comment += '\n';
              }
            }

            // Get the PR number
            const pr_number = context.payload.pull_request.number;

            // Delete previous comments from this action
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number
            });

            for (const comment of comments.data) {
              if (comment.body.includes('# üì¶ Dependency Version Check Report')) {
                await github.rest.issues.deleteComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: comment.id
                });
              }
            }
            
            // Post new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number,
              body: comment
            }); 